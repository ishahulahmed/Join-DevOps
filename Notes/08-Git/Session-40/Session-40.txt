Session Overview
------------------
a) Branching
b) Merge
c) Rebase
d) Merge vs Rebase
e) Merge conflicts

when you first install git in your local machine. later created few files and want to commit those files to git using
git add . (it will add to staging area)
git commit -m "some-message" (here you will get Author identity unknow error)
Author identity unknown

*** Please tell me who you are.

Run

  git config --global user.email "you@example.com"
  git config --global user.name "Your Name"

to set your account's default identity.
Omit --global to set the identity only in this repository.

fatal: unable to auto-detect email address (got 'shahu@Shahuls-Laptop.(none)')

You, need to set your user.email and user.name for commiting your changes. Here Your Setting global identiy i.e default identity. you can also set a new author for every repository you created.

Set Author for a Specific Repository (Locally)
-----------------------------------------------
If you want to set the author name and email for just one specific repository:

1) Navigate to the repository's directory using your terminal or command prompt.

2) Run the following commands:
   git config user.name "Your Name"
   git config user.email "your.email@example.com"
   This will only affect the repository you're currently in and won't change the settings for any other repositories.

3) To check the current author settings for the repository, you can use:
   git config user.name
   git config user.email

4) To check global settings:
   git config --global user.name
   git config --global user.email

5) These settings determine the author information for commits you make.

This is just commit author. When you push your changes to remote github. either you can send it through SSH by saving credentials in .ssh folder (using your private key) or window credential manager will save your github credentials it will push changes to your github account automatically when you type. git push origin main. (you can check in credentials of your github account in windows credential manager).

to see global configuration set 
cat ~/.gitconfig (in user home directory .gitconfig will have have global author configuration details)


till we were in the main branch adding to the staging area, making local commits and then pushing to the remote repository.

imp file --> duplicate the file
do the changes
review the changes
test the file
if good, then change in main file

Git --> Single source of truth (Because we can make versions, give reviews and see who has made changes etc)

For Example Research Paper on CICD from Students
-------------------------------------------------
Two Options

a) Single paper --> write everything in single paper from all (all students will write in single paper)

b) Multiple papers --> finally colloborate imp points into one paper (all students write in different papers and imp points in one paper)

so, second option is better.

Colloboration --> This is about Collabration. So, if in a project more than one person is working then we should have collabration. In order to have this collaboration we have something called Branching.

Branching
-----------
main --> points to Production, direct changes are not at allowed. 
through some review process (changes in main brnach only through review process)

main --> feature branch

do changes in feature branch --> get reviews --> run some tests --> scan the code

feature --> main (merge feature branch into main branch)

everyone should create one branch for any change... (in a project everyone should create one branch)

git log --oneline (you will get log in one line)
83f3b7f (HEAD -> main, origin/main) started first with plain dosa

git log (will give full information)
commit 83f3b7f48683c78c3ee2a504c225c9976051280e (HEAD -> main, origin/main)
Author: ishahulahmed <shahulahmed1717@gmail.com>
Date:   Sat Aug 31 12:29:59 2024 +0530

    started first with plain dosa


83f3b7f48683c78c3ee2a504c225c9976051280e --> SHA Code --> this is a algorithm --> 40 chars 
(no matter how much big file we will give SHA algorithm will create a 40 charchters code)

git - the stupid content tracker (content tracker means that's a key value pair)
(value is the source code (code in the repository) we wrote and key is the 40 charchters SHA Algorithm code (commit id) assigned to it depending up on the value key will change)

key --> value

4bd656fd136438832b47ed66a211797afc53b3fb (key) --> current code in the workspace (value)

echo "Hello World" | git hash-object --stdin --> prints sha code on the screen for this content  (here echo "hello World" is input to second command)
(here for Hello World content you will same id anywhere if content changes id will change)
(git using this SHA algorithm verifies whether content is changed or not according to content id will be generated)

git cat-file <commit id> -p --> print the info about sha code

git cat-file 83f3b7f48683c78c3ee2a504c225c9976051280e -p
tree 50720f518454641b6b0496802cc5109cb9e3fcaa
author ishahulahmed <shahulahmed1717@gmail.com> 1725087599 +0530
committer ishahulahmed <shahulahmed1717@gmail.com> 1725087599 +0530

started first with plain dosa

Our dosa business has been successful and growing from now on direct changes in main branch is not allowed. We should be very careful before doing any change in our project.

goto repository settings --> Click on Branches --> Click on Add classic branch protection rule 
Branch name pattern --> main (input) --> click on check-box Require a pull request before merging (automatically under this Require approvals option will be enabled) --> Click on Create

from now on in main branch no one can push directly.

from now for any small change we have to create a branch make chages in it then merge with main branch.

git checkout -b --> create new branch and change the workspace into new branch 
git checkout -b karam-dosa
Switched to a new branch 'karam-dosa'

new branch means till now which is already existing we are duplicating it and putting it into new branch

git log --oneline
83f3b7f (HEAD -> karam-dosa, origin/main, main) started first with plain dosa
(SHA Code will be same since no changes were made in the code only new branch created and it's first commit-id will be the last commit-id of main branch  
 because that is where from we are starting)

git add .; git commit -m "added karam to dosa"; git push origin karam-dosa (making changes in new branch)
git add .; git commit -m "added oil to karam dosa"; git push origin karam-dosa

git log --oneline
6e64599 (HEAD -> karam-dosa, origin/karam-dosa) added oil to karam dosa
3332287 added karam to dosa
83f3b7f (origin/main, main) started first with plain dosa

now, we want to merge this changes in main branch.
After merging pull request in github you need to changes in local repository (that is you need to pull those changes in local repository also)
git checkout main
git pull (git pull origin main)

whether to know whether a commit is merge commit or normal commit for merge commit there will be two parents for normal commits only one parent.
the previous commit is the parent to the present commit in normal commit

ChatGPT - Pull Request
------------------------
Creating a pull request (PR) for someone else’s repository is a common way to contribute to open-source projects or collaborate on code with others. Here’s a step-by-step guide on how to do it:

 1. Fork the Repository

    First, you need your own copy of the repository to work on. This is done by forking the original repository.
    a. Go to the repository’s page on GitHub.
    b. Click the “Fork” button in the top right corner of the page.
    c. GitHub will create a copy of the repository under your account.

 2. Clone Your Fork

    Next, you need to get a local copy of your forked repository on your machine
    a. Go to your forked repository on GitHub.
    b. Click the “Code” button and copy the URL (use HTTPS or SSH depending on your preference).
    c. Open a terminal (or Git Bash) and run the following command:
       git clone <URL-of-your-fork>
    d. Navigate to the repository directory:
       cd <repository-name>

 3. Create a New Branch

    It’s a good practice to create a new branch for your changes instead of working on the default branch.
    a. Create and switch to a new branch:
       git checkout -b <your-branch-name>

 4. Make Your Changes
  
    Edit the code, add features, or fix bugs as needed.

    a. Make your changes to the codebase.
    b. Stage the changes:
       git add <changed-files>
    c. Commit your changes:
       git commit -m "Description of your changes"

 5. Push Your Changes

    Push your changes to your forked repository on GitHub
    a. Push to your branch:
       git push origin <your-branch-name>
   
 6. Create a Pull Request

    Now, you need to create a pull request from your forked repository.
    a. Go to your forked repository on GitHub.
    b. Click on the “Pull Requests” tab.
    c. Click the “New Pull Request” button.
    d. Choose the base repository and branch you want to merge your changes into (usually the original repository’s main branch).
    e. Choose your fork and branch as the head repository and branch.
    f. Review your changes and add a title and description to explain what you’ve done.
    g. Click “Create Pull Request.”

 7. Follow Up

    - Monitor the pull request for any feedback or requests for changes from the repository maintainers.
    - Make any necessary updates to your PR as requested.
    - Communicate with the repository maintainers if needed.

And that’s it! You’ve successfully created a pull request to contribute to someone else’s repository.

git remote -v
The output will show the remote repository URL, which often includes the owner’s username or organization.

Two ways to create repository
-----------------------------
1) create a repository in github. clone that into your local system make changes i.e add files and push it to github.
2) To send an existing content in a folder on your computer to github. navigate to that folder in git bash then    
   git init
   git add .
   git commit -m "commiting locally"
   git branch -M main (as it will create master branch we want to name as main)

   create a repository in github and copy it's url then 
   git remote add origin https://github.com/ishahulahmed/git-practise-fun.git (this is main we are now adding remote github repositry url)
   git push -u origin main
      	
   
Merge
-------
Merge
rebase

Merging
---------
create another branch
do the changes in that branch
raise PR
get the approval
then merge it

merge gives us a new merge which has 2 parents, we can clearly see the history

Rebase
---------
rebase --> change the base
no extra commit
commit id are changed (different from branch commit id's)
no history is preserved, it is rewritten as if it is done in main branch
looks clean, linear history

Merge vs Rebase
---------------
a) Merge will give us extra commit id. Rebase will not give us any extra commit id.
b) In merging history is preserved. You can check origin and see what happened in the branches.
c) In rebase history is not preserved. Commit id's are changed. No extra commit id's are created.

When Merge?
-----------
single branch --> multiple persons are working --> prefer merge
if you want to keep the history --> prefer merge
blindly go for merge, if you are not sure

When Rebase?
------------
single branch --> single person --> prefer rebase
if you dont want history --> prefer rebase
if you want clean structure --> prefer rebase

git branch -d egg-dosa (To delete a branch)

conflicts
----------------
if git findsout 2 different content in the same line, it cant take decission. people who wrote the code should sit together and resolve conflict

if main branch is moved forward 
another branch is trying to merge the changes, then conflict will come 
(By considering the old main branch not new main branch which has moved)

ChatGpt
-------
Here are some common scenarios where merge conflicts might occur:

Different changes to the same part of a file: If both branches modify the same lines of code in a file differently, Git won't know which change to apply, leading to a conflict.

a) File-level conflicts: If files were deleted in one branch but modified in another, Git may not know how to reconcile these differences.

b) Renaming or moving files: Git might struggle to understand that a file in one branch is the same as a file renamed or moved in another branch.

c) Binary files: Git cannot merge binary files (like images or compiled binaries) automatically, so any changes to these files in different branches can cause conflicts.

The number of files itself isn't the primary factor; it's the content and changes within those files that matter. If the changes made in your new branch conflict with changes made in the main branch since they diverged, Git will indicate a conflict when you try to merge the branches back together.

If the content of the files is exactly the same between your branch and the new main branch, and the new main branch has additional files that your branch doesn't have, you typically won't encounter merge conflicts related to those additional files.
However, there are some considerations to keep in mind:

a) File Deletions: If files were deleted in the new main branch that still exist in your branch (and have been modified), Git will mark these as conflicts because it needs to reconcile the deletion with your changes.

b) Binary Files: If the new files in the main branch are binary files or files that Git cannot merge automatically (like images), you may encounter conflicts.

My Example
-----------
for example you made a new branch and doing your work but already main branch has moved forward as so many people are collabrating.
now you want you work to merge with main branch so you raised a pull request but it showing conflicts becuase main branch has already moved forwad
so first you pull the changes i.e new main branch into your local by using commands
git checkout main
git pull origin main
so changes have been pulled into main
now change to your branch
git checkout karam-egg-dosa
git rebase main
after using git rebase main it will show conflicts message in your local git in vs code you can see what are the changes and accept or make changes to that file after doing changes in that file use command
git rebase --continue (it will show 1/2) (after every conflict resoluting commit the changes)
then commit changes locally using
git add .; git commit -m "remove neyyi";
git rebase --continue (it will show 2/2) (use rebase till conflicts are cleared) (after every conflict resolution commit the changes)
git add .; git commit -m "instead of 3 eggs 2 eggs and karam";
you will get in git after running above command
(all conflicts fixed: run "git rebase --continue")
then use command git rebase --continue you will get
Successfully rebased and updated refs/heads/karam-egg-dosa
after accepting or ignoring change few commit id's will be changed according in your existing karam-egg-dosa branch
after all conflicts resolved push your changes to remote github
git push origin karam-egg-dosa -f (here we are using -f forcing the chage without -f it will not work since we have already chaged the history due to conflicts)
now you can raise pull request since conflicts are not showing
then reiviewers will reiview your code and finally merged to main branch


23:52




